{"version":3,"sources":["components/Upload/upload.js","App.js","serviceWorker.js","index.js"],"names":["UploadForm","handleChange","e","results","forEach","result","_result","Object","slicedToArray","file","reader","FileReader","onload","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","res","wrap","_context","prev","next","axios","url","method","data","JSON","parse","target","sent","fileDownload","body","stop","this","_x","apply","arguments","readAsText","classes","props","react_default","createElement","className","center","index_es","href","htmlFor","lib_default","as","id","onChange","style","display","variant","button","React","Component","withStyles","theme","margin","spacing","unit","input","defineProperty","width","textAlign","breakpoints","down","App","upload","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4XAyBMA,6MACJC,aAAe,SAACC,EAAGC,GACjBA,EAAQC,QAAQ,SAAAC,GAAU,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CACNF,EADM,GACdI,GADcH,EAAA,GAAAA,EAAA,IAElBI,EAAS,IAAIC,WACnBD,EAAOE,OAAP,eAAAC,EAAAN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KAAgB,SAAAC,EAAOhB,GAAP,IAAAiB,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACIC,IAAM,CACtBC,IAAK,8EACLC,OAAQ,OACRC,KAAMC,KAAKC,MAAM3B,EAAE4B,OAAOzB,UAJd,OACRc,EADQE,EAAAU,KAMdC,IAAab,EAAIQ,KAAKM,KAAM,eANd,wBAAAZ,EAAAa,SAAAhB,EAAAiB,SAAhB,gBAAAC,GAAA,OAAAvB,EAAAwB,MAAAF,KAAAG,YAAA,GAQA5B,EAAO6B,WAAW9B,8EAGb,IACC+B,EAAYL,KAAKM,MAAjBD,QACR,OACEE,EAAA1B,EAAA2B,cAAA,OAAKC,UAAWJ,EAAQK,QACtBH,EAAA1B,EAAA2B,cAAA,mCACAD,EAAA1B,EAAA2B,cAACG,EAAA,EAAD,KACEJ,EAAA1B,EAAA2B,cAACG,EAAA,EAAD,iBAAqBJ,EAAA1B,EAAA2B,cAAA,KAAGI,KAAK,0CAAR,oCACrBL,EAAA1B,EAAA2B,cAACG,EAAA,EAAD,gDACAJ,EAAA1B,EAAA2B,cAACG,EAAA,EAAD,+BACAJ,EAAA1B,EAAA2B,cAACG,EAAA,EAAD,0EACAJ,EAAA1B,EAAA2B,cAACG,EAAA,EAAD,wFACAJ,EAAA1B,EAAA2B,cAACG,EAAA,EAAD,4BACAJ,EAAA1B,EAAA2B,cAACG,EAAA,EAAD,2GACAJ,EAAA1B,EAAA2B,cAACG,EAAA,EAAD,KAAUJ,EAAA1B,EAAA2B,cAAA,YACVD,EAAA1B,EAAA2B,cAAA,SAAOK,QAAQ,iBAAf,0BACAN,EAAA1B,EAAA2B,cAACM,EAAAjC,EAAD,CAAiBkC,GAAG,SAASC,GAAG,gBAChBC,SAAUjB,KAAKlC,aAAcoD,MAAO,CAACC,QAAS,WAC5DZ,EAAA1B,EAAA2B,cAACG,EAAA,EAAD,CAAQS,QAAQ,YAAYX,UAAWJ,EAAQgB,QAA/C,sBAjCaC,IAAMC,WAiDhBC,uBAlEA,SAAAC,GAAK,MAAK,CACvBJ,OAAQ,CACNK,OAAQD,EAAME,QAAQC,MAExBC,MAAO,CACLV,QAAS,QAEXT,OAAOtC,OAAA0D,EAAA,EAAA1D,CAAA,CACL2D,MAAO,MACPL,OAAQ,SACRM,UAAW,UACVP,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BH,MAAO,WAsDEP,CAAmB3D,GClDnBsE,mLARX,OACE5B,EAAA1B,EAAA2B,cAAA,OAAKC,UAAU,OACbF,EAAA1B,EAAA2B,cAAC4B,EAAD,cAJUb,aCFEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAA1B,EAAA2B,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.518f0cbb.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Button, List, ListItem } from '@material-ui/core'\nimport FileReaderInput from 'react-file-reader-input'\nimport fileDownload from 'js-file-download'\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing.unit,\n  },\n  input: {\n    display: 'none',\n  },\n  center: {\n    width: '60%',\n    margin: '0 auto',\n    textAlign: 'center',\n    [theme.breakpoints.down('sm')]: {\n      width: '100%',\n    },\n  },\n})\n\nclass UploadForm extends React.Component {\n  handleChange = (e, results) => {\n    results.forEach(result => {\n      const [e, file] = result\n      const reader = new FileReader()\n      reader.onload = async e => {\n        const res = await axios({\n          url: 'https://zjwizf5n37.execute-api.us-east-1.amazonaws.com/default/parseResults',\n          method: 'post',\n          data: JSON.parse(e.target.result),\n        })\n        fileDownload(res.data.body, 'results.csv')\n      }\n      reader.readAsText(file)\n    })\n  }\n  render() {\n    const { classes } = this.props\n    return (\n      <div className={classes.center}>\n        <h1>Results Parser Thingy</h1>\n        <List>\n          <ListItem>\n            Go to&nbsp;\n            <a href=\"http://findadoctor.virginiapremier.com\">findadoctor.virginiapremier.com</a>\n          </ListItem>\n          <ListItem>Open Chrome Developer Tools (press F12)</ListItem>\n          <ListItem>Open the \"Network\" tab</ListItem>\n          <ListItem>Back on the page, fill out the form as normal and click \"Search\" </ListItem>\n          <ListItem>\n            Once the results appear, find \"lookphpJson.php\" in the Network tab and click it\n          </ListItem>\n          <ListItem>Click on \"Response\"</ListItem>\n          <ListItem>\n            Select everything that's there and copy it into a blank Notepad docuent and save it as a\n            .txt file\n          </ListItem>\n          <ListItem>\n            <form>\n              <label htmlFor=\"my-file-input\">Upload that file here:</label>\n              <FileReaderInput\n                as=\"binary\"\n                id=\"my-file-input\"\n                onChange={this.handleChange}\n                style={{ display: 'inline' }}\n              >\n                <Button variant=\"contained\" className={classes.button}>\n                  Upload\n                </Button>\n              </FileReaderInput>\n            </form>\n          </ListItem>\n        </List>\n      </div>\n    )\n  }\n}\n\nUploadForm.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(UploadForm)\n","import React, { Component } from 'react'\nimport './App.css'\nimport Upload from './components/Upload/upload'\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing.unit,\n  },\n  input: {\n    display: 'none',\n  },\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Upload />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}